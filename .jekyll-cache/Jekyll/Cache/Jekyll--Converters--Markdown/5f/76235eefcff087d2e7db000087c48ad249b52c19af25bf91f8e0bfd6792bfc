I"ãT<p>Timezones are a presentation layer problem. It should always be up to the front end application to present UTC time in 
a user friendly timezone. But this isnâ€™t always possible. Today weâ€™re going to look at one Spring Boot / Angular use case
where this is no longer a possibility, and my thoughts about it.</p>

<h2 id="the-setup">The Setup</h2>

<p>Imagine we had an API that tracked shifts. Say we had a shift class that looked a bit like the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Document</span>
<span class="nd">@TypeAlias</span><span class="o">(</span><span class="s">"Shift"</span><span class="o">)</span>
<span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Shift</span> <span class="o">{</span>

  <span class="nd">@Id</span>
  <span class="kd">private</span> <span class="nc">ObjectId</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">computerId</span><span class="o">;</span>
  <span class="nd">@Indexed</span> <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">closedAt</span><span class="o">;</span>
  <span class="nd">@Indexed</span> <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Lets assume weâ€™re being responsible and saving all of our times as UTC.</p>

<p>Say that we had a class called <code class="highlighter-rouge">PaymentEntry</code> that tracked any payments applied against that shift. Say it looked a bit like the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Document</span>
<span class="nd">@TypeAlias</span><span class="o">(</span><span class="s">"PaymentEntry"</span><span class="o">)</span>
<span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PaymentEntry</span> <span class="o">{</span>

  <span class="nd">@Id</span>
  <span class="kd">private</span> <span class="nc">ObjectId</span> <span class="n">id</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">ObjectId</span> <span class="n">shiftId</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Pretty straight forward. Now this isnâ€™t actually how you would do this, but for the purposes of this example say 
the front end wanted to know how much we had paid against each closed shift, as well as the time the shift was closed. 
So we decide to declare a class that will represent this data as the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShiftPayment</span> <span class="o">{</span>
  
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">shiftId</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">closedAt</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">amountPaid</span><span class="o">;</span>
  
<span class="o">}</span>
</code></pre></div></div>

<p>Then we create a custom repository and <code class="highlighter-rouge">MongoTemplate</code> to implement our join and group by query as the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ShiftPayment</span><span class="o">&gt;</span> <span class="nf">getShiftReportSummary</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
                                                         <span class="n">lookup</span><span class="o">(</span><span class="s">"paymentEntry"</span><span class="o">,</span> <span class="s">"_id"</span><span class="o">,</span> <span class="s">"shiftId"</span><span class="o">,</span> <span class="s">"payments"</span><span class="o">),</span>
                                                         <span class="n">unwind</span><span class="o">(</span><span class="s">"payments"</span><span class="o">),</span>
                                                         <span class="n">group</span><span class="o">(</span><span class="s">"_id"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="s">"_id"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"shiftId"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"payments.amount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amountPaid"</span><span class="o">));</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"shift"</span><span class="o">,</span> <span class="nc">ShiftPayment</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Cool. Now the front end can grab this little summary and just use a date pipe to 
display the date. The date pipe defaults to the local systemâ€™s default timezone.</p>

<p>Ok, so far so easy, but whereâ€™s the problem?</p>

<h2 id="a-little-more-complicated">A Little More Complicated</h2>

<p>Say the user only wanted to see shifts closed on a single given day. This is an interesting one, because days are different 
in each timezone.</p>

<p>Again, no need to panic, a quick solution to this one is to take two <code class="highlighter-rouge">LocalDateTime</code> objects from the front end in UTC
and let the front end decide exactly what constitutes a day for them. Your method might look like this then</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ShiftPayment</span><span class="o">&gt;</span> <span class="nf">getShiftReportSummary</span><span class="o">(</span><span class="nc">LocalDateTime</span> <span class="n">startTime</span><span class="o">,</span> <span class="nc">LocalDateTime</span> <span class="n">endTime</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
                                                         <span class="n">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">).</span><span class="na">gte</span><span class="o">(</span><span class="n">startTime</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(</span><span class="nc">ZoneOffset</span><span class="o">.</span><span class="na">UTC</span><span class="o">))</span>
                                                                       <span class="o">.</span><span class="na">lte</span><span class="o">(</span><span class="n">endTime</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(</span><span class="nc">ZoneOffset</span><span class="o">.</span><span class="na">UTC</span><span class="o">))),</span>
                                                         <span class="n">lookup</span><span class="o">(</span><span class="s">"paymentEntry"</span><span class="o">,</span> <span class="s">"_id"</span><span class="o">,</span> <span class="s">"shiftId"</span><span class="o">,</span> <span class="s">"payments"</span><span class="o">),</span>
                                                         <span class="n">unwind</span><span class="o">(</span><span class="s">"payments"</span><span class="o">),</span>
                                                         <span class="n">group</span><span class="o">(</span><span class="s">"_id"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="s">"_id"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"shiftId"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"payments.amount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amountPaid"</span><span class="o">));</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"shift"</span><span class="o">,</span> <span class="nc">ShiftPayment</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>Cool, so weâ€™re still safe and the backend still doesnâ€™t care about timezones.</p>

<h2 id="a-problem">A Problem</h2>

<p>Say the user now wanted to see payments against any shift grouped by close day. Uh oh. Now weâ€™ve got ourselves a problem.</p>

<p>Say a user in Edmonton closed a shift at 22:00 on December 1st GMT. We responsibly save this date in our backend as 05:00 December 2nd UTC. 
Now we decide to group by the date portion of the date in the back end. Their shift close gets lumped in with the sum for December 2nd. Your user is now very scared
and confused, and calls you on a Saturday to express their concerns about your skills as a developer.</p>

<p>So what can we do in this situation? One suggestion I heard was to save a second date in local time along with the UTC date. I can say from experience that this
gets unmanageable extremely quickly. And if your API serves multiple timezones youâ€™re going to be in for some very interesting queries.</p>

<p>So what can we do? Well Iâ€™ve come up with a solution that I think is pretty clean. We do need to break one barrier though.
The API needs to know what timezone the user wants their report. This hurts but itâ€™s a necessity. You can decide how you want
to handle this. The timezone can be sent along with the request or it can be put in the env variables if your API is only 
serving a single timezone at a time.</p>

<p>The solution is to project our dates into the requested timezone before we do our group. This took me a while to figure out 
with MongoTemplate, but you can do this by writing the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="nc">ProjectionOperation</span> <span class="nf">projectDateAsFormat</span><span class="o">(</span><span class="nc">ProjectionOperation</span> <span class="n">operation</span><span class="o">,</span> <span class="nc">String</span> <span class="n">format</span><span class="o">,</span>
                                                 <span class="nc">String</span> <span class="n">field</span><span class="o">,</span> <span class="nc">String</span> <span class="n">as</span><span class="o">,</span> <span class="nc">String</span> <span class="n">timezone</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">operation</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="nc">DateOperators</span><span class="o">.</span><span class="na">dateOf</span><span class="o">(</span><span class="n">field</span><span class="o">)</span>
                                      <span class="o">.</span><span class="na">withTimezone</span><span class="o">(</span><span class="nc">DateOperators</span><span class="o">.</span><span class="na">Timezone</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">timezone</span><span class="o">))</span>
                                      <span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">format</span><span class="o">)).</span><span class="na">as</span><span class="o">(</span><span class="n">as</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>I also wrote a quick and filthy addFields alternative for MongoTemplate, because it was a pain that it wasnâ€™t supported</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ProjectionOperation</span> <span class="nf">projectClass</span><span class="o">(</span><span class="nc">Class</span> <span class="n">clazz</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ProjectionOperation</span> <span class="n">p</span> <span class="o">=</span> <span class="n">project</span><span class="o">();</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Field</span> <span class="n">field</span> <span class="o">:</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">())</span> <span class="o">{</span>
      <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">as</span><span class="o">(</span><span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">p</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>The object we are returning is also going to change a little, to look more like the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShiftPayment</span> <span class="o">{</span>
  
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">date</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">amountPaid</span><span class="o">;</span>
  
<span class="o">}</span>
</code></pre></div></div>

<p>And now weâ€™re ready to write our query</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ShiftPayment</span><span class="o">&gt;</span> <span class="nf">getShiftReportSummary</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">Aggregation</span> <span class="n">aggregation</span> <span class="o">=</span> <span class="nc">Aggregation</span><span class="o">.</span><span class="na">newAggregation</span><span class="o">(</span><span class="n">match</span><span class="o">(</span><span class="nc">Criteria</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="s">"closedAt"</span><span class="o">).</span><span class="na">exists</span><span class="o">(</span><span class="kc">true</span><span class="o">)),</span>
                                                         <span class="n">lookup</span><span class="o">(</span><span class="s">"paymentEntry"</span><span class="o">,</span> <span class="s">"_id"</span><span class="o">,</span> <span class="s">"shiftId"</span><span class="o">,</span> <span class="s">"payments"</span><span class="o">),</span>
                                                         <span class="n">projectDateAsFormat</span><span class="o">(</span>
                                                             <span class="n">projectClass</span><span class="o">(</span><span class="nc">Shift</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="s">"payments"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"payments"</span><span class="o">),</span>
                                                             <span class="s">"%Y-%m-%d"</span><span class="o">,</span>
                                                             <span class="s">"closedAt"</span><span class="o">,</span>
                                                             <span class="s">"date"</span><span class="o">,</span>
                                                             <span class="s">"America/Edmonton"</span><span class="o">),</span>
                                                         <span class="n">unwind</span><span class="o">(</span><span class="s">"payments"</span><span class="o">),</span>
                                                         <span class="n">group</span><span class="o">(</span><span class="s">"date"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">first</span><span class="o">(</span><span class="s">"date"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"date"</span><span class="o">)</span>
                                                             <span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="s">"payments.amount"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"amountPaid"</span><span class="o">));</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">mongoTemplate</span><span class="o">.</span><span class="na">aggregate</span><span class="o">(</span><span class="n">aggregation</span><span class="o">,</span> <span class="s">"shift"</span><span class="o">,</span> <span class="nc">ShiftPayment</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getMappedResults</span><span class="o">();</span>
  <span class="o">}</span>
</code></pre></div></div>

<p>And bam! No more calls on Saturday, and no bothering with persisting pesky timezones.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Today we looked at a few timezone applications and my approaches to them. Note that all of the code in this post 
is untested, but should give you some ideas about how you might handle timezones in your own applications.</p>

<p>Have fun, and happy coding!</p>

:ET