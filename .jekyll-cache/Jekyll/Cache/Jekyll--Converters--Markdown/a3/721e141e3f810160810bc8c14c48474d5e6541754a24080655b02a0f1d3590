I"9<p>Front end applications often need to display filtered information to their users, and writing boilerplate 
endpoints to filter different properties on your collections can get tiresome. 
Today I’ll take a quick look
at how you might use Querydsl to allow your API users to query your MongoDb collections themselves.</p>

<p>A repository containing a working copy of all of the code discussed in this post can be found 
<a href="https://github.com/lucasgauk/spring-query-dsl">here</a>.</p>

<h2 id="the-dependencies">The Dependencies</h2>

<p>You’ll need to add the following to your pom file</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="nt">&lt;properties&gt;</span>
    <span class="nt">&lt;query-dsl.version&gt;</span>4.2.1<span class="nt">&lt;/query-dsl.version&gt;</span>
  <span class="nt">&lt;/properties&gt;</span>

  <span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>com.querydsl<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>querydsl-mongodb<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>${query-dsl.version}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>com.querydsl<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>querydsl-apt<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>${query-dsl.version}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>

  <span class="nt">&lt;build&gt;</span>
    <span class="nt">&lt;plugins&gt;</span>
      <span class="nt">&lt;plugin&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.mysema.maven<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>apt-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.1.3<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;executions&gt;</span>
          <span class="nt">&lt;execution&gt;</span>
            <span class="nt">&lt;phase&gt;</span>generate-sources<span class="nt">&lt;/phase&gt;</span>
            <span class="nt">&lt;goals&gt;</span>
              <span class="nt">&lt;goal&gt;</span>process<span class="nt">&lt;/goal&gt;</span>
            <span class="nt">&lt;/goals&gt;</span>
            <span class="nt">&lt;configuration&gt;</span>
              <span class="nt">&lt;outputDirectory&gt;</span>${project.build.directory}/generated-sources<span class="nt">&lt;/outputDirectory&gt;</span>
              <span class="nt">&lt;processor&gt;</span>org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor<span class="nt">&lt;/processor&gt;</span>
            <span class="nt">&lt;/configuration&gt;</span>
          <span class="nt">&lt;/execution&gt;</span>
        <span class="nt">&lt;/executions&gt;</span>
      <span class="nt">&lt;/plugin&gt;</span>
    <span class="nt">&lt;/plugins&gt;</span>
  <span class="nt">&lt;/build&gt;</span>
</code></pre></div></div>

<h2 id="the-collection">The Collection</h2>
<p>Today we’re going to be emulating a simple order API that tracks orders and payments taken against those orders.</p>

<p>I like to define a base entity class that defines a few useful items that each collection in my database will share.</p>

<p>For demonstration purposes the base entity class is going to look as follows (note that I am using <a href="https://projectlombok.org/">lombok</a>)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>

 <span class="nd">@Id</span>
 <span class="kd">private</span> <span class="nc">ObjectId</span> <span class="n">id</span><span class="o">;</span>
 <span class="nd">@CreatedDate</span>
 <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p>The main order class will look as follows</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@QueryEntity</span>
<span class="nd">@Document</span>
<span class="nd">@TypeAlias</span><span class="o">(</span><span class="s">"order"</span><span class="o">)</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Order</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>

<span class="kd">private</span> <span class="nc">String</span> <span class="n">customerName</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">BigDecimal</span> <span class="n">orderTotal</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="n">orderStatus</span><span class="o">;</span>
<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Payment</span><span class="o">&gt;</span> <span class="n">payments</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">orderClosedAt</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">OrderStatus</span> <span class="o">{</span>
 <span class="no">IN_PROGRESS</span><span class="o">,</span> <span class="no">COMPLETED</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="nc">Order</span> <span class="nf">from</span><span class="o">(</span><span class="nc">OrderRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
 <span class="k">return</span> <span class="k">new</span> <span class="nf">Order</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getCustomerName</span><span class="o">(),</span>
                  <span class="n">request</span><span class="o">.</span><span class="na">getOrderTotal</span><span class="o">(),</span>
                  <span class="nc">OrderStatus</span><span class="o">.</span><span class="na">IN_PROGRESS</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span>
                  <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(),</span>
                  <span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>Notice that I am using a <code class="highlighter-rouge">String</code> for the <code class="highlighter-rouge">orderStatus</code> rather than the <code class="highlighter-rouge">OrderStatus</code> directly.
This is absolutely bad practice but you’ll see why I’m doing it later.</p>

<p>API users will be able to add payments to the order. The payment class will look as follows</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Payment</span> <span class="o">{</span>

    <span class="nc">LocalDateTime</span> <span class="n">processedAt</span><span class="o">;</span>
    <span class="nc">BigDecimal</span> <span class="n">amount</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Payment</span> <span class="nf">from</span><span class="o">(</span><span class="nc">PaymentRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">Payment</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span> <span class="n">request</span><span class="o">.</span><span class="na">getAmount</span><span class="o">());</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<p>With these three classes we’ve defined a very basic order tracking system. Users can add orders and then
add payments against those orders. Orders can be closed if they have been paid in full.</p>

<p>I’ve skipped over a few small pieces, but they aren’t critical to the point of this blog post.</p>

<h2 id="the-repository">The Repository</h2>

<p>Next we will have to add a repository for our new collection. It should look as follows</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">OrderRepository</span> <span class="kd">extends</span> <span class="nc">MongoRepository</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;,</span> <span class="nc">QuerydslPredicateExecutor</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The <code class="highlighter-rouge">QueryDslPredicateExecutor</code> interface exposes some very useful methods for our collection.
The one we will be focusing on today is the <code class="highlighter-rouge">Iterable&lt;T&gt; findAll(Predicate var1)</code> method.</p>

<p>Our code today will essentially boil down to allowing our users to create a <code class="highlighter-rouge">Predicate</code> 
such that they can search through our collection themselves.</p>

<h2 id="creating-the-predicate">Creating the Predicate</h2>

<p>Now that we have this repository, all we really need to do is allow our users to build their own
<code class="highlighter-rouge">Predicate</code> classes to search for whatever they want on our collection. The following is my adaptation
of a blog post I found a while back regarding this. I wish I could link to it but I can no longer find
the original article. If any of the following looks familiar, shoot me an email!</p>

<p>This is the part where this becomes flexible. My implementation isn’t great, I would recommend using
this as a starting point and refactoring it to suit your application better.</p>

<p>The idea boils down to allowing the user to create their own query strings defining a list 
of <code class="highlighter-rouge">AND</code> operations they wish to perform on the collection. Our job will be to parse this query
and create the <code class="highlighter-rouge">Predicate</code> for them. The following will be the format of the query:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;property name&gt;&lt;operator&gt;&lt;match object&gt;,&lt;property name&gt;&lt;operator&gt;...
</code></pre></div></div>

<p>We will define a single search criteria as follows</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">class</span> <span class="nc">SearchCriteria</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="no">OPERATIONS</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"&lt;"</span><span class="o">,</span> <span class="s">"&gt;"</span><span class="o">,</span> <span class="s">":"</span><span class="o">);</span>

  <span class="kd">private</span> <span class="nc">String</span> <span class="n">key</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">operation</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">value</span><span class="o">;</span>

  <span class="nc">Boolean</span> <span class="nf">isValid</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="no">OPERATIONS</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">operation</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
  <span class="o">}</span>

<span class="o">}</span> 

</code></pre></div></div>

<p>As you can see, we accept three operations - less than, greater than, and equals. We will define a class
to create a <code class="highlighter-rouge">Predicate</code> from a <code class="highlighter-rouge">SearchCriteria</code> as follows</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BasicPredicate</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="nc">SearchCriteria</span> <span class="n">criteria</span><span class="o">;</span>

  <span class="nc">BasicPredicate</span><span class="o">(</span><span class="nc">SearchCriteria</span> <span class="n">criteria</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">criteria</span> <span class="o">=</span> <span class="n">criteria</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nc">BooleanExpression</span> <span class="nf">getPredicate</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">tClass</span><span class="o">,</span> <span class="nc">String</span> <span class="n">collectionName</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">PathBuilder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">entityPath</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PathBuilder</span><span class="o">&lt;&gt;(</span><span class="n">tClass</span><span class="o">,</span> <span class="n">collectionName</span><span class="o">);</span>

    <span class="c1">// Date criteria</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isDate</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()))</span> <span class="o">{</span>
      <span class="nc">DatePath</span><span class="o">&lt;</span><span class="nc">LocalDate</span><span class="o">&gt;</span> <span class="n">datePath</span> <span class="o">=</span> <span class="n">entityPath</span><span class="o">.</span><span class="na">getDate</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
      <span class="k">switch</span> <span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getOperation</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">case</span> <span class="s">":"</span><span class="o">:</span>
          <span class="k">return</span> <span class="n">datePath</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
        <span class="k">case</span> <span class="s">"&gt;"</span><span class="o">:</span>
          <span class="k">return</span> <span class="n">datePath</span><span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
        <span class="k">case</span> <span class="s">"&lt;"</span><span class="o">:</span>
          <span class="k">return</span> <span class="n">datePath</span><span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isNumber</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()))</span> <span class="o">{</span>
      <span class="nc">NumberPath</span><span class="o">&lt;</span><span class="nc">BigDecimal</span><span class="o">&gt;</span> <span class="n">numPath</span> <span class="o">=</span> <span class="n">entityPath</span><span class="o">.</span><span class="na">getNumber</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getKey</span><span class="o">(),</span> <span class="nc">BigDecimal</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
      <span class="k">switch</span> <span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getOperation</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">case</span> <span class="s">":"</span><span class="o">:</span>
          <span class="k">return</span> <span class="n">numPath</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
        <span class="k">case</span> <span class="s">"&gt;"</span><span class="o">:</span>
          <span class="k">return</span> <span class="n">numPath</span><span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
        <span class="k">case</span> <span class="s">"&lt;"</span><span class="o">:</span>
          <span class="k">return</span> <span class="n">numPath</span><span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">()));</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="nc">StringPath</span> <span class="n">stringPath</span> <span class="o">=</span> <span class="n">entityPath</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getKey</span><span class="o">());</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getOperation</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="s">":"</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">stringPath</span><span class="o">.</span><span class="na">containsIgnoreCase</span><span class="o">(</span><span class="n">criteria</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isDate</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="nc">LocalDate</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">DateTimeParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isNumber</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">NumberFormatException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Lets break this down. As you can see, the <code class="highlighter-rouge">BasicPredicate</code> has a SearchCriteria. Calling the 
<code class="highlighter-rouge">getPredicate</code> method will generate a new <code class="highlighter-rouge">BooleanExpression</code> predicate based on the SearchCriteria
contained by the class.</p>

<p>To do this I am using implementations of the dsl <code class="highlighter-rouge">Path</code> class. These classes contain a reference
to the property on the object you are looking to query, and can be given comparison operators to 
build a <code class="highlighter-rouge">Predicate</code>.</p>

<p>As you can see, I’m assuming that if I can parse the value as a date or a Number that the path
should be a <code class="highlighter-rouge">DatePath</code> or a <code class="highlighter-rouge">NumberPath</code> respectively. This is pretty bad. For the purposes
of this little demo it works, but it would maybe be best to use reflection or another method of
attempting to determine the class of the property on the object that this is used on. Or hell, maybe
it would be best if this wasn’t generic. It would probably be safest for each class to have it’s own
Predicate builder BasicPredicate -&gt; OrderPredicate maybe. Anyways, take the idea and run with it.</p>

<p>Moving along, now what we need is a way to parse a whole query string into a bunch of <code class="highlighter-rouge">SearchCriteria</code>
and then build a combined Predicate from the entire query. That class might look like the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SearchCriteria</span><span class="o">&gt;</span> <span class="n">criteria</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">tClass</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">collectionName</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">BasicPredicateBuilder</span><span class="o">(</span><span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">tClass</span><span class="o">,</span> <span class="nc">String</span> <span class="n">collectionName</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">criteria</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">tClass</span> <span class="o">=</span> <span class="n">tClass</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">collectionName</span> <span class="o">=</span> <span class="n">collectionName</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">from</span><span class="o">(</span><span class="nc">String</span> <span class="n">search</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IllegalArgumentException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">search</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"([\\w.]+?)([:&lt;&gt;])([\\w.\\- ]+?),"</span><span class="o">);</span>
      <span class="nc">Matcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">search</span> <span class="o">+</span> <span class="s">","</span><span class="o">);</span>
      <span class="k">while</span> <span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
        <span class="nc">SearchCriteria</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchCriteria</span><span class="o">(</span><span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="n">matcher</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">c</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Invalid query: "</span> <span class="o">+</span> <span class="n">c</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">this</span><span class="o">.</span><span class="na">criteria</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">criteria</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Invalid query: "</span> <span class="o">+</span> <span class="n">search</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">with</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">operation</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">criteria</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">SearchCriteria</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">operation</span><span class="o">,</span> <span class="n">value</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">BooleanExpression</span> <span class="nf">build</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">criteria</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">BooleanExpression</span><span class="o">&gt;</span> <span class="n">predicates</span> <span class="o">=</span> <span class="n">criteria</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">param</span> <span class="o">-&gt;</span> <span class="o">{</span>
      <span class="nc">BasicPredicate</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicate</span><span class="o">&lt;&gt;(</span><span class="n">param</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">predicate</span><span class="o">.</span><span class="na">getPredicate</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tClass</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">collectionName</span><span class="o">);</span>
    <span class="o">}).</span><span class="na">filter</span><span class="o">(</span><span class="nl">Objects:</span><span class="o">:</span><span class="n">nonNull</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

    <span class="nc">BooleanExpression</span> <span class="n">expression</span> <span class="o">=</span> <span class="n">predicates</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

    <span class="k">for</span> <span class="o">(</span><span class="nc">BooleanExpression</span> <span class="n">item</span> <span class="o">:</span> <span class="n">predicates</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">expression</span> <span class="o">=</span> <span class="n">expression</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="n">expression</span><span class="o">;</span>

  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>For now the important method is the <code class="highlighter-rouge">from(String search)</code> method. This method uses regex to create
SearchCriteria from a query string. Then the build takes each of the criteria, uses the <code class="highlighter-rouge">BasicPredicate</code>
to create Predicates and then combines them all together as <code class="highlighter-rouge">AND</code> operations, returning a final
Predicate. This predicate can then be sent straight to our repository!</p>

<p>So that’s the goofy stuff done. Let’s write a bit more boilerplate code to let our users access these 
features.</p>

<h2 id="the-service-and-the-controller">The Service and the Controller</h2>

<p>I always like to abstract the repository away from the user with a service. In this case the service
also handles operations on the Order like adding a payment and closing the order.</p>

<p>A very simple service for Order manipulation might look like the following</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderServiceImpl</span> <span class="kd">implements</span> <span class="nc">OrderService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OrderRepository</span> <span class="n">repository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OrderServiceImpl</span><span class="o">(</span><span class="nc">OrderRepository</span> <span class="n">repository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">repository</span> <span class="o">=</span> <span class="n">repository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="nf">search</span><span class="o">(</span><span class="nc">Predicate</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Order</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Order</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">saveAll</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">orders</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">saveAll</span><span class="o">(</span><span class="n">orders</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Order</span> <span class="nf">addPayment</span><span class="o">(</span><span class="nc">String</span> <span class="n">orderId</span><span class="o">,</span> <span class="nc">Payment</span> <span class="n">payment</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">orderId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">OrderNotFoundException</span><span class="o">(</span><span class="n">orderId</span><span class="o">));</span>
        <span class="n">order</span><span class="o">.</span><span class="na">getPayments</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">payment</span><span class="o">);</span>
        <span class="nc">BigDecimal</span> <span class="n">paymentTotal</span> <span class="o">=</span> <span class="n">order</span><span class="o">.</span><span class="na">getPayments</span><span class="o">()</span>
                                       <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                                       <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Payment:</span><span class="o">:</span><span class="n">getAmount</span><span class="o">)</span>
                                       <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="nl">BigDecimal:</span><span class="o">:</span><span class="n">add</span><span class="o">)</span>
                                       <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">paymentTotal</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getOrderTotal</span><span class="o">())</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">closeOrder</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">closeOrder</span><span class="o">(</span><span class="nc">Order</span> <span class="n">order</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setOrderStatus</span><span class="o">(</span><span class="nc">OrderStatus</span><span class="o">.</span><span class="na">COMPLETED</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="n">order</span><span class="o">.</span><span class="na">setOrderClosedAt</span><span class="o">(</span><span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>As you can see, we have a few boilerplate Order methods and a search method that sends the 
predicate straight to the Repository and creates a more manageable List with the result.</p>

<p>Now lets let our users go nuts</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span>
<span class="nd">@CrossOrigin</span><span class="o">(</span><span class="n">origins</span> <span class="o">=</span> <span class="s">"*"</span><span class="o">,</span> <span class="n">maxAge</span> <span class="o">=</span> <span class="mi">3600</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OrderController</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">OrderController</span><span class="o">(</span><span class="nc">OrderService</span> <span class="n">orderService</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">orderService</span> <span class="o">=</span> <span class="n">orderService</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/query"</span><span class="o">)</span>
  <span class="nd">@ResponseBody</span>
  <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="nf">query</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">String</span> <span class="n">search</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>

    <span class="n">builder</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">search</span><span class="o">);</span>
    <span class="nc">BooleanExpression</span> <span class="n">exp</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">exp</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@PostMapping</span>
  <span class="nd">@ResponseBody</span>
  <span class="kd">public</span> <span class="nc">Order</span> <span class="nf">create</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">OrderRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="nc">Order</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>
  <span class="o">}</span>

  <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/{orderId}/payment"</span><span class="o">)</span>
  <span class="nd">@ResponseBody</span>
  <span class="kd">public</span> <span class="nc">Order</span> <span class="nf">addPayment</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">String</span> <span class="n">orderId</span><span class="o">,</span> <span class="nd">@RequestBody</span> <span class="nc">PaymentRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">addPayment</span><span class="o">(</span><span class="n">orderId</span><span class="o">,</span> <span class="nc">Payment</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>This controller exposes all of the stuff we’ve done so far as an API. Users can create Orders,
add Payments, and then search for them using our custom query language.</p>

<p>So what might this look like? Let’s take a look at some tests.</p>

<h2 id="tests-and-final-results">Tests and Final Results</h2>

<p>Let’s try searching for a couple things at once</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">searchForOrderByStatusAndCreatedDate</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Order</span> <span class="n">o1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">o1</span><span class="o">.</span><span class="na">setOrderStatus</span><span class="o">(</span><span class="nc">OrderStatus</span><span class="o">.</span><span class="na">COMPLETED</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setOrderStatus</span><span class="o">(</span><span class="nc">OrderStatus</span><span class="o">.</span><span class="na">IN_PROGRESS</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">Order</span> <span class="n">o3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">o3</span><span class="o">.</span><span class="na">setOrderStatus</span><span class="o">(</span><span class="nc">OrderStatus</span><span class="o">.</span><span class="na">COMPLETED</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>

        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">saveAll</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">,</span> <span class="n">o3</span><span class="o">));</span>

        <span class="n">o1</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">getCreatedAt</span><span class="o">().</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">10</span><span class="o">));</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setCreatedAt</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">getCreatedAt</span><span class="o">().</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">5</span><span class="o">));</span>

        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">saveAll</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">));</span>

        <span class="nc">String</span> <span class="n">query1</span> <span class="o">=</span> <span class="s">"orderStatus:IN_PROGRESS,createdAt&gt;"</span> <span class="o">+</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">6</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">query2</span> <span class="o">=</span> <span class="s">"orderStatus:COMPLETED,createdAt&gt;"</span> <span class="o">+</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">6</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">query3</span> <span class="o">=</span> <span class="s">"orderStatus:COMPLETED,createdAt&lt;"</span> <span class="o">+</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">minusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>

        <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>
        <span class="n">builder1</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">query1</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">query1Orders</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">builder1</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">query1Orders</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">query1Orders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>
        <span class="n">builder2</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">query2</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">query2Orders</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">builder2</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">query2Orders</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">query2Orders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">o3</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>
        <span class="n">builder3</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">query3</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">query3Orders</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">builder3</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">query3Orders</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">query3Orders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>We can also search for properties on nested objects in a List! It will return any object that contains
a child object that matches that property.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">searchForOrderByPayment</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Order</span> <span class="n">o1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">o1</span><span class="o">.</span><span class="na">setOrderTotal</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">);</span>
        <span class="nc">Order</span> <span class="n">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">o2</span><span class="o">.</span><span class="na">setOrderTotal</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">);</span>
        <span class="nc">Order</span> <span class="n">o3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
        <span class="n">o3</span><span class="o">.</span><span class="na">setOrderTotal</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">TEN</span><span class="o">);</span>

        <span class="nc">PaymentRequest</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaymentRequest</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ZERO</span><span class="o">);</span>
        <span class="nc">PaymentRequest</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaymentRequest</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">ONE</span><span class="o">);</span>
        <span class="nc">PaymentRequest</span> <span class="n">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaymentRequest</span><span class="o">(</span><span class="nc">BigDecimal</span><span class="o">.</span><span class="na">TEN</span><span class="o">);</span>

        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">saveAll</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">,</span> <span class="n">o3</span><span class="o">));</span>

        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">addPayment</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="nc">Payment</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">p1</span><span class="o">));</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">addPayment</span><span class="o">(</span><span class="n">o2</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="nc">Payment</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">p2</span><span class="o">));</span>
        <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">addPayment</span><span class="o">(</span><span class="n">o3</span><span class="o">.</span><span class="na">getId</span><span class="o">().</span><span class="na">toString</span><span class="o">(),</span> <span class="nc">Payment</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">p3</span><span class="o">));</span>


        <span class="nc">String</span> <span class="n">query1</span> <span class="o">=</span> <span class="s">"payments.amount&gt;1"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">query2</span> <span class="o">=</span> <span class="s">"payments.amount:0"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">query3</span> <span class="o">=</span> <span class="s">"payments.amount&lt;5"</span><span class="o">;</span>

        <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>
        <span class="n">builder1</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">query1</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">query1Orders</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">builder1</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">query1Orders</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">query1Orders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">o3</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>
        <span class="n">builder2</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">query2</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">query2Orders</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">builder2</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">query2Orders</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">query2Orders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">builder3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicPredicateBuilder</span><span class="o">&lt;&gt;(</span><span class="nc">Order</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"order"</span><span class="o">);</span>
        <span class="n">builder3</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">query3</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">query3Orders</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">orderService</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">builder3</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">query3Orders</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>Pretty cool right?</p>

<h2 id="wrap-up">Wrap Up</h2>

<p>So what have we done? We’ve essentially created a reusable query language that can be slapped onto
any basic collection to allow users to search for items that match any combination of basic criteria.</p>

<p>Some of the code in here is pretty sloppy but I hope I helped you get an idea of how you might implement this
in your own projects.</p>

<p>Have fun, and happy coding!</p>

:ET